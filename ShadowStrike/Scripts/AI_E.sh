#!/bin/bash 

# Check if the correct number of arguments is provided
if [ "$#" -ne 2 ]; then
    echo "Usage: $0 <TELEGRAM_BOT_TOKEN> <TELEGRAM_CHAT_ID>"
    exit 1
fi

# Assign the arguments to variables
TELEGRAM_BOT_TOKEN="$1"
TELEGRAM_CHAT_ID="$2"

# Define the base path to the directory containing the scan result directories
BASE_DIR="/var/www/html/ShadowStrike/results/Endpoint"

# Function to get the latest timestamped directory
get_latest_directory() {
    local dir="$1"
    local latest_dir=$(ls -td "$dir"/*/ 2>/dev/null | head -n 1)
    if [ -n "$latest_dir" ]; then
        echo "$latest_dir"
    else
        echo ""  # Return an empty string if no directories found
    fi
}

# Function to get the latest file based on the timestamp in the filename
get_latest_file() {
    local dir="$1"
    local pattern="$2"
    local latest_file=$(ls -t "$dir"/$pattern 2>/dev/null | head -n 1)
    if [ -n "$latest_file" ]; then
        echo "$latest_file"
    else
        echo ""  # Return an empty string if no files found
    fi
}

# Check if tgpt is installed
if ! command -v tgpt &> /dev/null; then
    echo "Error: tgpt is not installed. Please install it to proceed."
    exit 1
fi

# Check if the base directory exists
if [ ! -d "$BASE_DIR" ]; then
    echo "Error: Base directory $BASE_DIR does not exist."
    exit 1
fi

# Get the latest timestamped directory in BASE_DIR
LATEST_DIR=$(get_latest_directory "$BASE_DIR")

# Check if the latest directory exists
if [ -z "$LATEST_DIR" ]; then
    echo "No directories found in $BASE_DIR."
    exit 1
fi

# Get the latest all_endpoint_data.txt file in the latest directory
LATEST_FILE=$(get_latest_file "$LATEST_DIR" "all_endpoint.txt")

# Check if the latest file exists
if [ -z "$LATEST_FILE" ]; then
    echo "No all_endpoint.txt file found in $LATEST_DIR."
    exit 1
fi

# Full path of the latest file
LATEST_FILE_PATH="$LATEST_FILE"
echo "Processing $LATEST_FILE_PATH"

# Split the input into chunks of 4000 characters
split_file() {
    local file="$1"
    local chunk_size=4000  # Adjust chunk size to the limit supported by tgpt
    local split_dir=$(mktemp -d)

    # Split file into chunks with a max line length of 4000 characters
    split -b "$chunk_size" "$file" "$split_dir/chunk_"

    echo "$split_dir"
}

# Generate report, attack commands, and solutions in chunks
process_chunked_file() {
    local file="$1"
    local query="$2"
    local output=""

    chunk_dir=$(split_file "$file")
    for chunk in "$chunk_dir"/*; do
        chunk_output=$(cat "$chunk" | tgpt "$query")
        output="$output$chunk_output\n"  # Append chunk result to final output
    done

    # Cleanup temporary directory
    rm -rf "$chunk_dir"
    
    # Remove occurrences of the word "Loading"
    echo -e "$output" | sed '/Loading/d'
}

# Function to convert content into a PDF using pandoc with improved styling
convert_to_pdf() {
    local content="$1"
    local pdf_file="$2"
    local title="$3"
    
    # Convert the content string to a temporary file
    echo -e "$content" > /tmp/content.txt

    # Convert the text file to a PDF using pandoc with better styling
pandoc /tmp/content.txt -o "$pdf_file" --pdf-engine=xelatex \
    -V geometry:margin=1in \
    -V fontsize=12pt \
    -V mainfont="Liberation Sans" \
    -V linestretch=1.5 \
    -V colorlinks=true \
    -V linkcolor="DarkBlue" \
    -V urlcolor="Teal" \
    -V documentclass="scrartcl" \
    -V title="$title" \
    -V subtitle="Generated by ShadowStrike" \
    -V titlepage=true \
    -V titlepage-color="DarkSlateGray" \
    -V titlepage-text-color="White" \
    -V titlepage-rule-color="Gold" \
    -V titlepage-rule-height=2 \
    -V header-includes="
        \usepackage{fancyhdr}
        \pagestyle{fancy}
        \fancyhf{}
        \fancyhead[L]{\textbf{$title}}
        \fancyhead[R]{\thepage}
    " \
    -V footer-includes="
        \fancyfoot[L]{\textit{Confidential - $(date '+%Y-%m-%d')}}
    " \
    -V toc=true \
    -V toc-title="Table of Contents" \
    -V numbersections=true \
    -V section-titles=true \
    --highlight-style=tango


    # Remove the temporary text file
    rm /tmp/content.txt
}

# Process the file in chunks and generate the reports
REPORT=$(process_chunked_file "$LATEST_FILE_PATH" "Generate a detailed human-readable report from these nmap scan results including open ports and vulnerabilities.")
ATTACK_COMMANDS=$(process_chunked_file "$LATEST_FILE_PATH" "Based on these nmap results, generate commands to test possible attacks for the open services.")
SOLUTION_VULNERABILITIES=$(process_chunked_file "$LATEST_FILE_PATH" "Provide solutions and preventive measures to resolve vulnerabilities in these nmap scan results.")

# Check if tgpt produced any output, handle failure
if [ -z "$REPORT" ]; then
    echo "Error: Failed to generate report using tgpt."
    exit 1
fi
if [ -z "$ATTACK_COMMANDS" ]; then
    echo "Error: Failed to generate attack commands using tgpt."
    exit 1
fi
if [ -z "$SOLUTION_VULNERABILITIES" ]; then
    echo "Error: Failed to generate solutions using tgpt."
    exit 1
fi

# Define file paths for saving PDF results in the latest directory
REPORT_PDF="$LATEST_DIR/report.pdf"
ATTACK_COMMANDS_PDF="$LATEST_DIR/attack_commands.pdf"
SOLUTION_VULNERABILITIES_PDF="$LATEST_DIR/solutions.pdf"

# Convert the tgpt results to PDF files with matching titles
convert_to_pdf "$REPORT" "$REPORT_PDF" "Network Scan Report - Open Ports and  Vulnerabilities"
convert_to_pdf "$ATTACK_COMMANDS" "$ATTACK_COMMANDS_PDF" "Attack Commands"
convert_to_pdf "$SOLUTION_VULNERABILITIES" "$SOLUTION_VULNERABILITIES_PDF" "Solutions for Vulnerabilities"

# Function to send files to Telegram
send_to_telegram() {
    local file_path="$1"
    local response=$(curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument" \
        -F chat_id="$TELEGRAM_CHAT_ID" \
        -F document=@"$file_path")

    if echo "$response" | grep -q '"ok":true'; then
        echo "Sent $file_path to Telegram successfully."
    else
        echo "Failed to send $file_path to Telegram."
        echo "Response: $response"
    fi
}

# Send the PDF files to Telegram
send_to_telegram "$REPORT_PDF"
send_to_telegram "$ATTACK_COMMANDS_PDF"
send_to_telegram "$SOLUTION_VULNERABILITIES_PDF"

# Output final success message
echo "All reports processed and sent to Telegram."

